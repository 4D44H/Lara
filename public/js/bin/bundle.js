///<reference path="_references.ts"/>
$("#button-create-survey").click(function () {
    var errors = new Array();
    if ($("#description").val().length > 1500) {
        errors.push(translate("descriptionTooLong"));
    }
    if (errors.length > 0) {
        bootbox.alert(errors.map(function (err) { return "<p>" + err + "</p>"; }).join("\n"));
        return false;
    }
});

///<reference path="_references.ts"/>
function getRowName(a) {
    return $(a).children("td").eq(0).text();
}
function getRowShifts(a) {
    return $(a).children("td").eq(1).text();
}
//inspired by http://stackoverflow.com/questions/3160277/jquery-table-sort
function sortTable($table, byName, descending) {
    var rowCatcher = byName ? getRowName : getRowShifts;
    var rows = $table
        .find("tbody")
        .find("tr")
        .toArray()
        .sort(function (a, b) { return rowCatcher(a).localeCompare(rowCatcher(b), undefined, { 'numeric': true }); });
    if (descending) {
        rows.reverse();
    }
    rows.forEach(function (row) { return $table.append($(row)); });
}
function updateSortIconStyle($table, byName, descending) {
    // remove specific sorting from all icons
    $table.find('.fa-sort, .fa-sort-desc, .fa-sort-asc')
        .removeClass('fa-sort-asc')
        .removeClass('fa-sort-desc')
        .addClass('fa-sort');
    // and add the current sorting order to the one that changed
    var icon = $table.find('.fa-sort, .fa-sort-desc, .fa-sort-asc')
        .filter(function () {
        var sortIdentifier = byName ? 'name' : 'shifts';
        return $(this).parent().data('sort') === sortIdentifier;
    });
    icon.removeClass('fa-sort')
        .addClass(descending ? 'fa-sort-desc' : 'fa-sort-asc');
}
function sortLeaderboards(sortIcon) {
    var $table = sortIcon.parents("table");
    var wasAscending = sortIcon.hasClass('fa-sort-asc');
    var isNameSort = sortIcon.parent().data('sort') === 'name';
    localStorage.setItem('preferredSortType', isNameSort ? 'name' : 'shifts');
    localStorage.setItem('preferredSortOrder', wasAscending ? 'descending' : 'ascending');
    sortTable($table, isNameSort, wasAscending);
    updateSortIconStyle($table, isNameSort, wasAscending);
}
$(".fa-sort, .fa-sort-desc, .fa-sort-asc").click(function () {
    sortLeaderboards(this);
});
$('#memberStatisticsTabs').find('thead').find('td').click(function () {
    sortLeaderboards($($(this).find('i').first()));
});
$(".statisticClubPicker").find("a").click(function () {
    var clubName = $(this).text().trim();
    localStorage.setItem('preferredStatistics', clubName);
});
$(".leaderboardsClubPicker").find("a").click(function () {
    var leaderBoardName = $(this).text().trim();
    localStorage.setItem('preferredLeaderboards', leaderBoardName);
});
$(function () {
    var preferredStatistics = localStorage.getItem('preferredStatistics');
    if (preferredStatistics) {
        $('.statisticClubPicker').find('a').filter(function () {
            return $(this).text().trim() === preferredStatistics;
        })
            .first()
            .click();
    }
    var preferredLeaderboards = localStorage.getItem('preferredLeaderboards');
    if (preferredLeaderboards) {
        $('.leaderboardsClubPicker').find('a').filter(function () {
            return $(this).text().trim() === preferredLeaderboards;
        })
            .first()
            .click();
    }
    var preferredSortType = localStorage.getItem('preferredSortType');
    var preferredSortOrder = localStorage.getItem('preferredSortOrder');
    var $tables = $('#memberStatisticsTabs').find('table');
    var isNameSort = preferredSortType === 'name';
    var isDescending = preferredSortOrder === 'descending';
    $tables.each(function () {
        sortTable($(this), isNameSort, isDescending);
        updateSortIconStyle($(this), isNameSort, isDescending);
    });
});

///<reference path="_references.ts"/>
var Club;
(function (Club) {
    Club[Club["None"] = 0] = "None";
    Club[Club["BcClub"] = 2] = "BcClub";
    Club[Club["BcCafe"] = 3] = "BcCafe";
    Club[Club["BdClub"] = 4] = "BdClub";
    Club[Club["BhClub"] = 5] = "BhClub";
    Club[Club["BiClub"] = 6] = "BiClub";
})(Club || (Club = {}));
function getIdOfClub(club) {
    switch (club) {
        case "bc-Club":
            return Club.BcClub;
        case "bc-Caf√©":
            return Club.BcCafe;
    }
    return Club.None;
}
function showErrorModal(message) {
    $("#errorModal").modal("show");
    $("#errorModal").find(".modal-body").html(message);
}

// external references go here
///<reference path="../typings/index.d.ts"/>
///<reference path="CreateEditEvent.ts"/>
///<reference path="CreateSurvey.ts"/>
///<reference path="StatisticsView.ts"/>
///<reference path="Utilities.ts"/>

///<reference path="_references.ts"/>
// values of events that should trigger the selection of all clubs
var internalEventValues = [
    "1",
    "4",
    "5",
    "6",
    "9" // other
];
$("#button-create-submit").add("#button-edit-submit").click(function () {
    var beginDate = new Date($("[name='beginDate']").prop("value") + " " + $("[name='beginTime']").prop("value"));
    var endDate = new Date($("[name='endDate']").prop("value") + " " + $("[name='endTime']").prop("value"));
    // contains the keys to translations to be shown if the condition is fulfilled
    var errorConditions = {
        'endBeforeStart': beginDate.getTime() > endDate.getTime(),
        'forgotFilter': $("#filter-checkboxes").find("input[type=checkbox]:checked").length === 0,
        'forgotPreparation': $('[name="preparationTime"]').val() === "",
        'forgotStartTime': $('[name="beginTime"]').val() === "",
        'forgotEndTime': $('[name="endTime"]').val() === ""
    };
    var errors = Object.keys(errorConditions)
        .filter(function (key) { return errorConditions[key]; })
        .map(function (key) { return translate(key); });
    if (errors.length > 0) {
        bootbox.alert(errors.map(function (err) { return "<p>" + err + "</p>"; }).join("\n"));
        return false;
    }
});
$(function () {
    // if set, internal events will trigger selection of all clubs
    // if user sets the club manually, we want to keep his selection
    var autoSelectAllClubs = true;
    var allClubCheckBoxes = $("#filter").find("input[type=checkbox]");
    allClubCheckBoxes.click(function () {
        autoSelectAllClubs = false;
    });
    // important to use function() (anonymous function) here an not an arrow function
    // using an arrow function will change the "this" inside
    $("[name='evnt_type']").click(function () {
        var prop = $(this).val();
        var isInternalEvent = internalEventValues.indexOf(prop) !== -1;
        if (isInternalEvent) {
            if (autoSelectAllClubs) {
                $("#filter").find("input[type=checkbox]").prop("checked", true);
            }
        }
        else {
            // reset all checkboxes
            $("#filter").find("input[type=checkbox]").prop("checked", false);
            var clubName = $(document).find("#place").val();
            var clubId = getIdOfClub(clubName);
            if (clubId !== -1) {
                var showToClubCheckbox = $(document).find("[name=filterShowToClub" + clubId + "]");
                showToClubCheckbox.prop("checked", true);
            }
        }
    });
});

///<reference path="../typings/index.d.ts"/>
///<reference path="Utilities.ts"/>

///<reference path="../typings/index.d.ts"/>
var Question = (function () {
    function Question(element) {
        this.questionDiv = $(element).closest('[name^=question]');
    }
    return Question;
}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,
